import en from "@/shared/locales/en.json";
import ru from "@/shared/locales/ru.json";
import ar from "@/shared/locales/ar.json";

export type Locale = "en" | "ru" | "ar";

export const locales: Locale[] = ["en", "ru", "ar"];
export const defaultLocale: Locale = "en";

export const translations = {
    en,
    ru,
    ar,
} as const;

export type TranslationKey = keyof typeof en;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
export function getNestedValue(
    obj: Record<string, unknown>,
    path: string,
): string {
    const result = path.split(".").reduce(
        (current: unknown, key) => (current as Record<string, unknown>)?.[key],
        obj,
    );
    return typeof result === "string" ? result : path;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
export function getTranslation(locale: Locale, key: string): string {
    const translation = translations[locale];

    // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥—É –ø–æ –∫–ª—é—á—É
    const result = (translation as Record<string, unknown>)[key];

    if (typeof result === "string") {
        return result;
    }

    // –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
    return getNestedValue(translation, key);
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–∞—Ö
export const languageNames = {
    en: "English",
    ru: "–†—É—Å—Å–∫–∏–π",
    ar: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
} as const;

export const languageFlags = {
    en: "üá∫üá∏",
    ru: "üá∑üá∫",
    ar: "üá∏üá¶",
} as const;

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
export { I18nProvider, useI18n } from "./context";
